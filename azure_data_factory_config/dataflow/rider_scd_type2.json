{
	"name": "rider_scd_type2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText4",
						"type": "DatasetReference"
					},
					"name": "target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText5",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText6",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "Insert"
				},
				{
					"name": "Update"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select4"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select5"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          rider_id as short,",
				"          rider_name as string,",
				"          phone_number as string,",
				"          address as string,",
				"          email as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source(output(",
				"          rider_id as short,",
				"          name as string,",
				"          phone_number as string,",
				"          address as string,",
				"          email as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> target",
				"target select(mapColumn(",
				"          rider_id_target = rider_id,",
				"          rider_name_target = name,",
				"          phone_number_target = phone_number,",
				"          address_target = address,",
				"          email_target = email",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source, select1 join(rider_id == rider_id_target,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join1",
				"join1 filter(isNull(rider_id_target)) ~> Insert",
				"join1 filter(!isNull(rider_id_target),",
				"     partitionBy('hash', 1)) ~> Update",
				"Update derive(isactive = 0) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          rider_id_target,",
				"          rider_name_target,",
				"          phone_number_target,",
				"          address_target,",
				"          email_target,",
				"          isactive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"Insert derive(isactive = 1) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          rider_id,",
				"          rider_name,",
				"          phone_number,",
				"          address,",
				"          email,",
				"          isactive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select4 alterRow(updateIf(1==1),",
				"     partitionBy('hash', 1)) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"select5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          rider_id as string,",
				"          name as string,",
				"          phone_number as string,",
				"          address as string,",
				"          email as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}